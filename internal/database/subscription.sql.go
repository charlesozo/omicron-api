// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: subscription.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUserSubscription = `-- name: CreateUserSubscription :one
INSERT INTO Subscription(subscription_id, userid, whatsapp_number, expiry_date, registered_user)
VALUES($1, $2, $3, $4, $5)
RETURNING subscription_id, userid, expiry_date, whatsapp_number, status, registered_user, subscription_tier
`

type CreateUserSubscriptionParams struct {
	SubscriptionID uuid.UUID
	Userid         uuid.NullUUID
	WhatsappNumber string
	ExpiryDate     time.Time
	RegisteredUser sql.NullBool
}

func (q *Queries) CreateUserSubscription(ctx context.Context, arg CreateUserSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createUserSubscription,
		arg.SubscriptionID,
		arg.Userid,
		arg.WhatsappNumber,
		arg.ExpiryDate,
		arg.RegisteredUser,
	)
	var i Subscription
	err := row.Scan(
		&i.SubscriptionID,
		&i.Userid,
		&i.ExpiryDate,
		&i.WhatsappNumber,
		&i.Status,
		&i.RegisteredUser,
		&i.SubscriptionTier,
	)
	return i, err
}

const inputPlan = `-- name: InputPlan :exec
INSERT INTO Plan (plan_name, description, price, duration_days) VALUES
('Monthly Plan', 'Unlock premium access for one month.', 7.00, 30),
('Annual Plan', 'Unlock premium access for one year at a discounted rate.', 50.00, 365)
`

func (q *Queries) InputPlan(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, inputPlan)
	return err
}

const paymentSetup = `-- name: PaymentSetup :one
INSERT INTO Payment (payment_id, userid, amount, plan_id, payment_date, expiry_date, payment_method)
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING payment_id, userid, amount, plan_id, payment_date, expiry_date, payment_method, payment_status
`

type PaymentSetupParams struct {
	PaymentID     uuid.UUID
	Userid        uuid.NullUUID
	Amount        sql.NullString
	PlanID        sql.NullInt32
	PaymentDate   sql.NullTime
	ExpiryDate    time.Time
	PaymentMethod sql.NullString
}

func (q *Queries) PaymentSetup(ctx context.Context, arg PaymentSetupParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, paymentSetup,
		arg.PaymentID,
		arg.Userid,
		arg.Amount,
		arg.PlanID,
		arg.PaymentDate,
		arg.ExpiryDate,
		arg.PaymentMethod,
	)
	var i Payment
	err := row.Scan(
		&i.PaymentID,
		&i.Userid,
		&i.Amount,
		&i.PlanID,
		&i.PaymentDate,
		&i.ExpiryDate,
		&i.PaymentMethod,
		&i.PaymentStatus,
	)
	return i, err
}
