// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type PaymentStatusEnum string

const (
	PaymentStatusEnumSuccessful PaymentStatusEnum = "Successful"
	PaymentStatusEnumPending    PaymentStatusEnum = "Pending"
	PaymentStatusEnumFailed     PaymentStatusEnum = "Failed"
)

func (e *PaymentStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatusEnum(s)
	case string:
		*e = PaymentStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatusEnum: %T", src)
	}
	return nil
}

type NullPaymentStatusEnum struct {
	PaymentStatusEnum PaymentStatusEnum
	Valid             bool // Valid is true if PaymentStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatusEnum), nil
}

type SubscriptionStatusEnum string

const (
	SubscriptionStatusEnumActive  SubscriptionStatusEnum = "Active"
	SubscriptionStatusEnumExpired SubscriptionStatusEnum = "Expired"
)

func (e *SubscriptionStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionStatusEnum(s)
	case string:
		*e = SubscriptionStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionStatusEnum: %T", src)
	}
	return nil
}

type NullSubscriptionStatusEnum struct {
	SubscriptionStatusEnum SubscriptionStatusEnum
	Valid                  bool // Valid is true if SubscriptionStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionStatusEnum), nil
}

type SubscriptionTierEnum string

const (
	SubscriptionTierEnumBasic     SubscriptionTierEnum = "Basic"
	SubscriptionTierEnumPro       SubscriptionTierEnum = "Pro"
	SubscriptionTierEnumFreeTrial SubscriptionTierEnum = "Free-Trial"
)

func (e *SubscriptionTierEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionTierEnum(s)
	case string:
		*e = SubscriptionTierEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionTierEnum: %T", src)
	}
	return nil
}

type NullSubscriptionTierEnum struct {
	SubscriptionTierEnum SubscriptionTierEnum
	Valid                bool // Valid is true if SubscriptionTierEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionTierEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionTierEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionTierEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionTierEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionTierEnum), nil
}

type Feed struct {
	UserFeed uuid.NullUUID
	Disable  sql.NullBool
}

type Payment struct {
	PaymentID     uuid.UUID
	Userid        uuid.NullUUID
	Amount        sql.NullString
	PlanID        sql.NullInt32
	PaymentDate   sql.NullTime
	ExpiryDate    time.Time
	PaymentMethod sql.NullString
	PaymentStatus NullPaymentStatusEnum
}

type Plan struct {
	PlanID       int32
	PlanName     string
	Description  sql.NullString
	Price        string
	DurationDays int32
}

type Registereduser struct {
	ID              uuid.UUID
	Username        string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	Email           string
	Isemailverified sql.NullBool
	VerifiedAt      time.Time
	Password        string
	WhatsappNumber  string
	Loggedin        sql.NullBool
	Apikey          string
	UpdatedUsername sql.NullBool
	UpdatedPassword sql.NullBool
}

type Subscription struct {
	SubscriptionID   uuid.UUID
	Userid           uuid.NullUUID
	ExpiryDate       time.Time
	WhatsappNumber   string
	Status           NullSubscriptionStatusEnum
	RegisteredUser   sql.NullBool
	SubscriptionTier NullSubscriptionTierEnum
}

type Unregistereduser struct {
	WhatsappNumber string
	CreatedAt      time.Time
	DisplayName    string
}
