// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Registeredusers (id, username, created_at, updated_at, email, password, whatsapp_number,apikey)
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, username, created_at, updated_at, email, isemailverified, verified_at, password, whatsapp_number, loggedin, apikey, updated_username, updated_password
`

type CreateUserParams struct {
	ID             uuid.UUID
	Username       string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	Password       string
	WhatsappNumber string
	Apikey         string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Registereduser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.Password,
		arg.WhatsappNumber,
		arg.Apikey,
	)
	var i Registereduser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Isemailverified,
		&i.VerifiedAt,
		&i.Password,
		&i.WhatsappNumber,
		&i.Loggedin,
		&i.Apikey,
		&i.UpdatedUsername,
		&i.UpdatedPassword,
	)
	return i, err
}

const deleteUserDetail = `-- name: DeleteUserDetail :exec
DELETE FROM RegisteredUsers
WHERE id = $1
`

func (q *Queries) DeleteUserDetail(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserDetail, id)
	return err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT id, username, created_at, updated_at, email, isemailverified, verified_at, password, whatsapp_number, loggedin, apikey, updated_username, updated_password FROM Registeredusers
WHERE apikey = $1
`

func (q *Queries) GetUserByToken(ctx context.Context, apikey string) (Registereduser, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, apikey)
	var i Registereduser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Isemailverified,
		&i.VerifiedAt,
		&i.Password,
		&i.WhatsappNumber,
		&i.Loggedin,
		&i.Apikey,
		&i.UpdatedUsername,
		&i.UpdatedPassword,
	)
	return i, err
}

const getUserDetails = `-- name: GetUserDetails :one
SELECT id, username, created_at, updated_at, email, isemailverified, verified_at, password, whatsapp_number, loggedin, apikey, updated_username, updated_password FROM Registeredusers
WHERE email = $1 OR whatsapp_number = $2
`

type GetUserDetailsParams struct {
	Email          string
	WhatsappNumber string
}

func (q *Queries) GetUserDetails(ctx context.Context, arg GetUserDetailsParams) (Registereduser, error) {
	row := q.db.QueryRowContext(ctx, getUserDetails, arg.Email, arg.WhatsappNumber)
	var i Registereduser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Isemailverified,
		&i.VerifiedAt,
		&i.Password,
		&i.WhatsappNumber,
		&i.Loggedin,
		&i.Apikey,
		&i.UpdatedUsername,
		&i.UpdatedPassword,
	)
	return i, err
}

const updateApiKey = `-- name: UpdateApiKey :exec
UPDATE Registeredusers
SET apikey = $1
WHERE id = $2
`

type UpdateApiKeyParams struct {
	Apikey string
	ID     uuid.UUID
}

func (q *Queries) UpdateApiKey(ctx context.Context, arg UpdateApiKeyParams) error {
	_, err := q.db.ExecContext(ctx, updateApiKey, arg.Apikey, arg.ID)
	return err
}

const updatepassword = `-- name: Updatepassword :one
UPDATE Registeredusers
SET password = $1,  updated_at = $2, updated_password = $3
WHERE id = $4
RETURNING id, username, created_at, updated_at, email, isemailverified, verified_at, password, whatsapp_number, loggedin, apikey, updated_username, updated_password
`

type UpdatepasswordParams struct {
	Password        string
	UpdatedAt       time.Time
	UpdatedPassword sql.NullBool
	ID              uuid.UUID
}

func (q *Queries) Updatepassword(ctx context.Context, arg UpdatepasswordParams) (Registereduser, error) {
	row := q.db.QueryRowContext(ctx, updatepassword,
		arg.Password,
		arg.UpdatedAt,
		arg.UpdatedPassword,
		arg.ID,
	)
	var i Registereduser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Isemailverified,
		&i.VerifiedAt,
		&i.Password,
		&i.WhatsappNumber,
		&i.Loggedin,
		&i.Apikey,
		&i.UpdatedUsername,
		&i.UpdatedPassword,
	)
	return i, err
}

const updateusername = `-- name: Updateusername :one
UPDATE RegisteredUsers
SET username = $1, updated_at = $2, updated_username = $3
WHERE id = $4
RETURNING id, username, created_at, updated_at, email, isemailverified, verified_at, password, whatsapp_number, loggedin, apikey, updated_username, updated_password
`

type UpdateusernameParams struct {
	Username        string
	UpdatedAt       time.Time
	UpdatedUsername sql.NullBool
	ID              uuid.UUID
}

func (q *Queries) Updateusername(ctx context.Context, arg UpdateusernameParams) (Registereduser, error) {
	row := q.db.QueryRowContext(ctx, updateusername,
		arg.Username,
		arg.UpdatedAt,
		arg.UpdatedUsername,
		arg.ID,
	)
	var i Registereduser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Isemailverified,
		&i.VerifiedAt,
		&i.Password,
		&i.WhatsappNumber,
		&i.Loggedin,
		&i.Apikey,
		&i.UpdatedUsername,
		&i.UpdatedPassword,
	)
	return i, err
}

const userSigninout = `-- name: UserSigninout :exec
UPDATE Registeredusers 
SET loggedIn = $1
WHERE id = $2
`

type UserSigninoutParams struct {
	Loggedin sql.NullBool
	ID       uuid.UUID
}

func (q *Queries) UserSigninout(ctx context.Context, arg UserSigninoutParams) error {
	_, err := q.db.ExecContext(ctx, userSigninout, arg.Loggedin, arg.ID)
	return err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec

UPDATE Registeredusers
SET isEmailVerified = $1, verified_at  =$2
WHERE id = $3
`

type VerifyUserEmailParams struct {
	Isemailverified sql.NullBool
	VerifiedAt      time.Time
	ID              uuid.UUID
}

func (q *Queries) VerifyUserEmail(ctx context.Context, arg VerifyUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, verifyUserEmail, arg.Isemailverified, arg.VerifiedAt, arg.ID)
	return err
}
